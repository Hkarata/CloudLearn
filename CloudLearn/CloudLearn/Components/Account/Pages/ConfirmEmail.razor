@page "/Account/ConfirmEmail"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using CloudLearn.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm email</PageTitle>

<div class="flex flex-col items-center justify-center h-screen">
    <div class="max-w-md mx-auto bg-white rounded-xl p-8 shadow-md shadow-green-500 overflow-hidden md:max-w-2xl">
        <div class="w-full flex flex-row justify-center items-center mb-4">
            <img src="/Images/img.png" width=100 height=100 alt="App logo" class="rounded-full object-contain" />
        </div>
        <h1 class="text-sm font-semibold text-center uppercase">account confirmed</h1>
        <br/>
        <StatusMessage  Message="@statusMessage" />
    </div>
</div>


@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"Error loading user with ID {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? "Thank you for confirming your account, Join us in learning." : "Error confirming your account.";
            await Task.Delay(10000);
            if (statusMessage.Equals("Thank you for confirming your account, Join us in learning."))
            {
                RedirectManager.RedirectTo("/Account/Login");
            }
            RedirectManager.RedirectTo("");
            
        }
    }
}
